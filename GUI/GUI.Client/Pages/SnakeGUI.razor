<!-- Name: Harrison Doppelt and Victor Valdez Landa -->
<!-- Date: 11/20/2024 -->
<!-- Database Password: CS3500 -->

@page "/snake"
@rendermode InteractiveServer
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics
@using System.Diagnostics
@using System.Text.Json
@using GUI.Client.Controllers
@using GUI.Client.Models
@inject IJSRuntime JsRuntime;

<PageTitle>Snake</PageTitle>

<!-- Connection Inputs -->
<div id="ConnectionInputs">
    <div class="input-row">

        <label for="playerName">Player Name: </label>
        <input id="playerName" maxlength="16" type="text" @bind="playerName" disabled="@connection.IsConnected" />

        <label for="ServerNameOrAddress">Server Address: </label>
        <input id="ServerNameOrAddress" type="text" @bind="ServerNameOrAddress" disabled="@connection.IsConnected" />

        <label for="ServerPort">Port: </label>
        <input id="ServerPort" type="number" @bind="ServerPort" disabled="@connection.IsConnected" />

        @if (connection.IsConnected)
        {
            <button class="btn btn-primary" @onclick="DisconnectFromServer">Disconnect</button>
        }
        else
        {
            <button class="btn btn-primary" disabled="@isConnecting" @onclick="ConnectToServerAsync">Connect</button>
        }

        @if (!string.IsNullOrEmpty(connectionError))
        {
            <div class="error">@connectionError</div>
        }

    </div>
</div>

<br />

<!-- Image for Powerup -->
<img id="powerupImage" src="images/powerup.png" style="display:none;" @ref="powerupImage" />

<!-- Image for Wall -->
<img id="wallImage" src="images/WallSprite.png" style="display:none;" @ref="wallImage" />

<!-- Background Image -->
<img @ref="backgroundImage" id="bgImage" src="images/Background.png" alt="image" style="display:none;" />

<!-- Canvas for Game Display -->
<div id="snakeCanvas" style="position: fixed; width: 100%; height: 100%">
    <BECanvas Width="1000" Height="1000" @ref="canvasReference"></BECanvas>
</div>

<!-- Connection / Network -->
@code
{
    /// <summary>
    ///     The name or address of the server to connect to.
    /// </summary>
    private string ServerNameOrAddress = "localhost";

    /// <summary>
    ///     The port number of the server to connect to.
    /// </summary>
    private int ServerPort = 11000;

    /// <summary>
    ///     The name of the player, used to identify the player on the server.
    /// </summary>
    private string playerName = string.Empty;

    /// <summary>
    ///     Represents the network connection to the server.
    /// </summary>
    private NetworkConnection connection = new NetworkConnection();

    /// <summary>
    ///     Controller that manages network communication and game-related commands.
    /// </summary>
    private NetworkController? networkController;

    /// <summary>
    ///     Indicates whether a connection attempt is currently in progress.
    /// </summary>
    private bool isConnecting = false;

    /// <summary>
    ///     Stores the error message to display when a connection attempt fails.
    /// </summary>
    private string connectionError = string.Empty;

    /// <summary>
    ///     Connects to the server and initializes the network loop.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task ConnectToServerAsync()
    {
        isConnecting = true;

        if (!connection.IsConnected)
        {
            try
            {
                connection.Connect(ServerNameOrAddress, ServerPort);
                connection.Send(playerName);
                networkController = new NetworkController(connection, playerName);

                await networkController.AddNewGameToDatabaseAsync();
                await networkController.NetworkLoopAsync(networkController);
            }
            catch (Exception)
            {
                await ShowConnectionErrorAsync("Connection failed. Please check the server and try again.");
            }
            finally
            {
                isConnecting = false;
            }
        }
    }

    /// <summary>
    ///     Displays a connection error message to the user for a specified duration.
    /// </summary>
    /// <param name="message">The error message to display.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task ShowConnectionErrorAsync(string message)
    {
        connectionError = message;
        await Task.Delay(3000);
        connectionError = string.Empty;
    }

    /// <summary>
    ///     Disconnects from the server if a connection exists.
    /// </summary>
    private void DisconnectFromServer()
    {
        if (connection.IsConnected)
        {
            _ = networkController.UpdatePlayerLeaveTimeInDatabaseAsync(networkController.PlayerID);

            _ = networkController.UpdateGameEndTimeInDatabaseAsync();

            connection.Disconnect();
        }
    }

    /// <summary>
    ///     Handles a key press event and sends the corresponding command to the server.
    /// </summary>
    /// <param name="key">The key pressed by the user.</param>
    [JSInvokable]
    public void HandleKeyPress(string key)
    {
        if (!connection.IsConnected)
        {
            return;
        }

        networkController?.KeyPressCommand(key);
    }

}

<!-- Rendering Game State -->
@code
{
    /// <summary>
    ///     Reference to the canvas component used for rendering.
    /// </summary>
    private BECanvasComponent canvasReference = null!;

    /// <summary>
    ///     The 2D drawing context for the canvas.
    /// </summary>
    private Canvas2DContext context = null!;

    /// <summary>
    ///     Reference to the background image element.
    /// </summary>
    private ElementReference backgroundImage;

    /// <summary>
    ///     Reference to the power-up image element.
    /// </summary>
    private ElementReference powerupImage;

    /// <summary>
    ///     Reference to the wall image element.
    /// </summary>
    private ElementReference wallImage;

    /// <summary>
    ///     Reference to the JavaScript module used for rendering.
    /// </summary>
    private IJSObjectReference jsModule = null!;

    /// <summary>
    ///     The size of the viewport used in the game rendering.
    /// </summary>
    private const int viewSize = 1000;

    /// <summary>
    ///     Snapshot of the current state of the game world.
    /// </summary>
    private World? snapshot;

    /// <summary>
    ///     Position of the player's view or camera in the game world.
    /// </summary>
    private Point2D? viewHead;

    /// <summary>
    ///     Called after the component has been rendered. Handles initialization during the first render
    ///     and starts the game loop on subsequent renders if connected to the server.
    /// </summary>
    /// <param name="firstRender">
    ///     A boolean indicating whether this is the first time the component is rendered.
    /// </param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/SnakeGUI.razor.js");
            this.context = await this.canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        }

        else if (connection.IsConnected)
        {
            GameLoopAsync();
        }
    }

    /// <summary>
    ///     Main game loop that continuously updates and renders the game world.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async void GameLoopAsync()
    {
        while (networkController?.TheWorld == null)
        {
            await Task.Delay(20);
        }

        while (true)
        {
            networkController.ResetCommandFlag();

            lock (networkController.TheWorld)
            {
                snapshot = new(networkController.TheWorld);
            }

            await DrawFrameAsync(snapshot);
            await Task.Delay(20);
        }
    }

    /// <summary>
    ///     Draws the current frame of the game world based on the provided snapshot.
    ///     Handles clearing the canvas, positioning the view, and rendering all elements.
    /// </summary>
    /// <param name="snapshot">The current state of the game world.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task DrawFrameAsync(World snapshot)
    {
        await context.BeginBatchAsync();
        await context.ClearRectAsync(0, 0, snapshot.WorldSize, snapshot.WorldSize);
        await context.SetFillStyleAsync("lightblue");
        await context.FillRectAsync(0, 0, 1000, 1000);
        await context.BeginPathAsync();
        await context.RectAsync(0, 0, viewSize, viewSize);
        await context.ClipAsync();
        await context.SaveAsync();

        // Ensure the networkController is initialized, the player's snake exists,
        // and the snake has enough body segments to be rendered.
        if (networkController == null || !snapshot.Snakes.TryGetValue(networkController.PlayerID, out Snake? snake) || snake == null || snake.SnakeBody.Count < 2)
        {
            return;
        }

        viewHead = snake.SnakeBody[snake.SnakeBody.Count - 1];

        await context.TranslateAsync(viewSize / 2, viewSize / 2);
        await context.TranslateAsync(-viewHead.X, -viewHead.Y);

        await context.DrawImageAsync(backgroundImage, -snapshot.WorldSize / 2, -snapshot.WorldSize / 2, snapshot.WorldSize, snapshot.WorldSize);
        await DrawWallsAsync(snapshot);
        await DrawSnakeAsync(snapshot);
        await DrawPowerupsAsync(snapshot);

        await context.RestoreAsync();
        await context.EndBatchAsync();
    }

    /// <summary>
    ///     Draws all walls in the game world based on the provided snapshot.
    ///     Each wall is divided into segments for rendering.
    /// </summary>
    /// <param name="snapshot">The current state of the game world.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task DrawWallsAsync(World snapshot)
    {
        foreach (Wall wall in snapshot.Walls.Values)
        {
            if (wall == null || wall.P1 == null || wall.P2 == null)
            {
                continue;
            }

            int deltaX = wall.P2.X - wall.P1.X;
            int deltaY = wall.P2.Y - wall.P1.Y;
            int wallLength = (int)Math.Sqrt(deltaX * deltaX + deltaY * deltaY);
            int numSegments = (int)Math.Ceiling(wallLength / 50.0);

            for (int i = 0; i < numSegments; i++)
            {
                int segmentX = wall.P1.X + (deltaX * i) / numSegments - 25;
                int segmentY = wall.P1.Y + (deltaY * i) / numSegments - 25;

                await context.DrawImageAsync(wallImage, segmentX, segmentY, 50, 50);
            }

            await context.DrawImageAsync(wallImage, wall.P2.X - 25, wall.P2.Y - 25, 50, 50);
        }
    }

    /// <summary>
    ///     Draws all snakes in the game world based on the provided snapshot.
    ///     Each snake is rendered with unique colors, along with its head and player score.
    /// </summary>
    /// <param name="snapshot">The current state of the game world.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task DrawSnakeAsync(World snapshot)
    {
        string[] uniqueColors = new string[]
        {
        "rgb(139, 69, 19)",     // Brown
        "rgb(0, 255, 0)",       // Green
        "rgb(0, 0, 255)",       // Blue
        "rgb(255, 255, 0)",     // Yellow
        "rgb(0, 255, 255)",     // Cyan
        "rgb(255, 0, 255)",     // Magenta
        "rgb(255, 165, 0)",     // Orange
        "rgb(128, 0, 128)"      // Purple
        };

        foreach (Snake snake in snapshot.Snakes.Values)
        {
            string strokeColor = !snake.SnakeAlive ? "rgb(255, 0, 0)" : uniqueColors[snake.SnakeID % uniqueColors.Length];

            await context.SetStrokeStyleAsync(strokeColor);
            await context.SetLineWidthAsync(10);

            for (int i = 1; i < snake.SnakeBody.Count; i++)
            {
                var currentSegment = snake.SnakeBody[i];
                var previousSegment = snake.SnakeBody[i - 1];

                await context.BeginPathAsync();
                await context.MoveToAsync(previousSegment.X, previousSegment.Y);
                await context.LineToAsync(currentSegment.X, currentSegment.Y);
                await context.StrokeAsync();
            }

            var head = snake.SnakeBody[snake.SnakeBody.Count - 1];
            var tail = snake.SnakeBody[0];

            if (!snake.SnakeAlive)
            {
                await DrawExplosionAsync(head.X, head.Y);
            }

            await context.SetFillStyleAsync(!snake.SnakeAlive ? "rgb(255, 0, 0)" : strokeColor);
            await context.BeginPathAsync();
            await context.ArcAsync(head.X, head.Y, 10, 0, 2 * Math.PI);
            await context.FillAsync();

            await DrawSnakeTailAsync(tail, snake.SnakeBody[1], strokeColor);

            string displayText = $"{snake.PlayerName} : {snake.PlayerScore}";
            await DrawTextAsync(displayText, head.X, head.Y - 15);

            await DrawSnakeEyesAsync(head.X, head.Y);
        }
    }

    /// <summary>
    ///     Draws text on the snake at a specified position.
    /// </summary>
    /// <param name="text">The text to render.</param>
    /// <param name="x">The X-coordinate of the text's position.</param>
    /// <param name="y">The Y-coordinate of the text's position.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task DrawTextAsync(string text, int x, int y)
    {
        await context.SetFontAsync("20px Arial");
        await context.SetFillStyleAsync("black");
        await context.SetTextAlignAsync(TextAlign.Center);
        await context.FillTextAsync(text, x, y);
    }

    /// <summary>
    ///     Draws the eyes of the snake's head at the specified coordinates.
    /// </summary>
    /// <param name="headX">The X-coordinate of the snake's head.</param>
    /// <param name="headY">The Y-coordinate of the snake's head.</param>
    /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
    private async Task DrawSnakeEyesAsync(double headX, double headY)
    {
        // Draw eyes
        double eyeOffsetX = 5;
        double eyeOffsetY = -5;
        double eyeRadius = 3;
        double pupilRadius = 1;

        // Draw the left outer white part
        await context.SetFillStyleAsync("rgb(255, 255, 255)"); // White
        await context.BeginPathAsync();
        await context.ArcAsync(headX - eyeOffsetX, headY + eyeOffsetY, eyeRadius, 0, 2 * Math.PI);
        await context.FillAsync();

        // Draw the left black pupil
        await context.SetFillStyleAsync("rgb(0, 0, 0)"); // Black
        await context.BeginPathAsync();
        await context.ArcAsync(headX - eyeOffsetX, headY + eyeOffsetY, pupilRadius, 0, 2 * Math.PI);
        await context.FillAsync();

        // Draw the right outer white part
        await context.SetFillStyleAsync("rgb(255, 255, 255)");
        await context.BeginPathAsync();
        await context.ArcAsync(headX + eyeOffsetX, headY + eyeOffsetY, eyeRadius, 0, 2 * Math.PI);
        await context.FillAsync();

        // Draw the right black pupil
        await context.SetFillStyleAsync("rgb(0, 0, 0)");
        await context.BeginPathAsync();
        await context.ArcAsync(headX + eyeOffsetX, headY + eyeOffsetY, pupilRadius, 0, 2 * Math.PI);
        await context.FillAsync();
    }

    /// <summary>
    ///     Draws a triangular tail for the snake.
    /// </summary>
    /// <param name="tailSegment">The tail segment of the snake (first body segment).</param>
    /// <param name="nextSegment">The next segment in the snake's body, used to determine direction.</param>
    /// <param name="color">The primary color of the snake.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task DrawSnakeTailAsync(Point2D tailSegment, Point2D nextSegment, string color)
    {
        // Calculate the direction vector from the tail to the next segment
        double directionX = tailSegment.X - nextSegment.X;
        double directionY = tailSegment.Y - nextSegment.Y;

        // Normalize the direction vector to unit length
        double length = Math.Sqrt(directionX * directionX + directionY * directionY);
        directionX /= length;
        directionY /= length;

        // Define the triangle points
        double baseX = tailSegment.X + directionX * 10; // Adjust the base of the triangle
        double baseY = tailSegment.Y + directionY * 10;
        double leftX = tailSegment.X + directionY * 5;  // Perpendicular offset for the left point
        double leftY = tailSegment.Y - directionX * 5;
        double rightX = tailSegment.X - directionY * 5; // Perpendicular offset for the right point
        double rightY = tailSegment.Y + directionX * 5;

        // Draw the triangle
        await context.SetFillStyleAsync(color);
        await context.BeginPathAsync();
        await context.MoveToAsync(baseX, baseY);   // Base point
        await context.LineToAsync(leftX, leftY);   // Left point
        await context.LineToAsync(rightX, rightY); // Right point
        await context.ClosePathAsync();
        await context.FillAsync();
    }

    /// <summary>
    ///     Draws all power-ups in the game world based on the provided snapshot.
    /// </summary>
    /// <param name="snapshot">The current state of the game world.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task DrawPowerupsAsync(World snapshot)
    {
        foreach (Powerup powerup in snapshot.Powerups.Values)
        {
            if (powerup == null || powerup.PowerupLocation == null)
            {
                continue;
            }

            await context.DrawImageAsync(powerupImage, powerup.PowerupLocation.X - 11, powerup.PowerupLocation.Y - 11, 22, 22);
        }
    }

    /// <summary>
    ///     Draws an explsion of particles on the snakes head when killed.
    /// </summary>
    /// <param name="x"> X-coordinate of the snakes head.</param>
    /// <param name="y"> Y-coordinate of the snakes head.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task DrawExplosionAsync(double x, double y)
    {
        int numParticles = 10;
        Random random = new Random();

        for (int i = 0; i < numParticles; i++)
        {
            // Produce a random agangle for the particles
            double angle = random.NextDouble() * 2 * Math.PI;
            double distance = random.Next(10, 80);
            double offsetX = Math.Cos(angle) * distance;
            double offsetY = Math.Sin(angle) * distance;
            double particleSize = random.Next(3, 10);

            string particleColor = $"rgb({random.Next(200, 255)}, {random.Next(0, 150)}, {random.Next(0, 150)})";

            // Draw the explosive particles
            await context.SetFillStyleAsync(particleColor);
            await context.BeginPathAsync();
            await context.ArcAsync(x + offsetX, y + offsetY, particleSize, 0, 2 * Math.PI);
            await context.FillAsync();
        }
    }
}