@page "/snake"
@rendermode InteractiveServer
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics
@using System.Diagnostics
@using System.Text.Json
@using CS3500.Networking
@inject IJSRuntime JsRuntime;

<PageTitle>Snake</PageTitle>

<!-- Connection Inputs -->
<div id="ConnectionInputs">
    <div class="input-row">

        <label for="PlayerName">Player Name: </label>
        <input id="PlayerName" type="text" @bind="PlayerName" disabled="@network.IsConnected" />

        <label for="ServerNameOrAddress">Server Address: </label>
        <input id="ServerNameOrAddress" type="text" @bind="ServerNameOrAddress" disabled="@network.IsConnected" />

        <label for="ServerPort">Port: </label>
        <input id="ServerPort" type="number" @bind="ServerPort" disabled="@network.IsConnected" />

        @if (network.IsConnected)
        {
            <button class="btn btn-primary" @onclick="DisconnectFromServer">Disconnect</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ConnectToServer">Connect</button>
        }

    </div>
</div>

<!-- Canvas for Game Display -->
<div id="snakeCanvas" style="position: fixed; width: 100%; height: 100%">
    <BECanvas Width="1000" Height="1000" @ref="canvasReference"></BECanvas>
</div>

@code
{

    /// <summary>
    ///     Default server name.
    /// </summary>
    private string ServerNameOrAddress = "localhost";

    /// <summary>
    ///     Default server port.
    /// </summary>
    private int ServerPort = 11000;

    /// <summary>
    ///     The NetworkConnection object representing a connection with the server.
    /// </summary>
    private NetworkConnection network = new NetworkConnection();

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    private string PlayerName { get; set; } = string.Empty;

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    private BECanvasComponent canvasReference = null!;

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    private Canvas2DContext context = null!;

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    private IJSObjectReference jsModule = null!;

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    private void ConnectToServer()
    {
        if (!network.IsConnected)
        {
            try
            {
                network.Connect(ServerNameOrAddress, ServerPort);
                Console.WriteLine($"Connected to {ServerNameOrAddress}:{ServerPort} as {PlayerName}");
                // Send initial player name or any necessary data to the server
                network.Send(PlayerName);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to connect: {ex.Message}");
            }
        }
    }

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    private void DisconnectFromServer()
    {
        if (network.IsConnected)
        {
            network.Disconnect();
            Console.WriteLine("Disconnected from server.");
        }
    }

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/SnakeGUI.razor.js");
            context = await canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));

            // TODO: Start the game loop

            // in the meantime, draw something to initialize the canvas
            // you may want to remove this after you are drawing something
            await context.SetFillStyleAsync("lightblue");
            await context.FillRectAsync(0, 0, 1000, 1000);
        }
    }

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    /// <param name="key"></param>
    [JSInvokable]
    public void HandleKeyPress(string key)
    {
        // TODO: Once the client is connected and the handshake is complete,
        //       invoke some controller method to send the appropriate command to the server


        // TODO: Remove this, which is just here to show you what the 'key' string is for whatever key you pressed
        Debug.WriteLine("key pressed: " + key);
    }

}