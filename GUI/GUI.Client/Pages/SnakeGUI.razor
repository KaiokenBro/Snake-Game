@page "/snake"
@rendermode InteractiveServer
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics
@using System.Diagnostics
@using System.Text.Json
@using GUI.Client.Controllers
@using GUI.Client.Models
@inject IJSRuntime JsRuntime;

<PageTitle>Snake</PageTitle>

<!-- Connection Inputs -->
<div id="ConnectionInputs">
    <div class="input-row">

        <label for="playerName">Player Name: </label>
        <input id="playerName" type="text" @bind="playerName" disabled="@connection.IsConnected" />

        <label for="ServerNameOrAddress">Server Address: </label>
        <input id="ServerNameOrAddress" type="text" @bind="ServerNameOrAddress" disabled="@connection.IsConnected" />

        <label for="ServerPort">Port: </label>
        <input id="ServerPort" type="number" @bind="ServerPort" disabled="@connection.IsConnected" />

        @if (connection.IsConnected)
        {
            <button class="btn btn-primary" @onclick="DisconnectFromServer">Disconnect</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ConnectToServer">Connect</button>
        }

    </div>
</div>

<br />

<!-- Background Image -->
<div>
    <img @ref="backgroundImage" id="bgImage" src="images/Background.png" alt="image" style="display:none;" />
</div>

<!-- Wall Image -->
<div>
    <img @ref="wallImage" id="wImage" src="images/WallSprite.png" alt="image" style="display:none;" />
</div>

<!-- Canvas for Game Display -->
<div id="snakeCanvas" style="position: fixed; width: 100%; height: 100%">
    <BECanvas Width="1000" Height="1000" @ref="canvasReference"></BECanvas>
</div>

<!-- Connection -->
@code
{

    // Server Name
    private string ServerNameOrAddress = "localhost";

    // Port
    private int ServerPort = 11000;

    // Create a new NetworkConnection instance
    private NetworkConnection connection = new NetworkConnection();

    // Player name
    private string playerName;

    // Controller
    private NetworkController networkController;

    /// <summary>
    ///     Triggered on Connect button.
    /// </summary>
    private async void ConnectToServer()
    {
        Console.WriteLine("ConnectToServer()");

        if (!connection.IsConnected)
        {
            try
            {
                // Establish connection to server
                connection.Connect(ServerNameOrAddress, ServerPort);
                Console.WriteLine("Connected To Server!");

                // Send PlayerName to server
                connection.Send(playerName);
                Console.WriteLine("Sent PlayerName To Server! " + playerName);

                // Create a NetworkController using the NetworkConnection instance
                networkController = new NetworkController(connection, playerName);
                Console.WriteLine("Created new NetworkController!");

                // Start the network loop to continuously receive data
                await NetworkLoop();
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    /// <summary>
    ///     Triggered on Disconnect button.
    /// </summary>
    private void DisconnectFromServer()
    {
        Console.WriteLine("DisconnectFromServer()");

        if (connection.IsConnected)
        {
            connection.Disconnect();
            Console.WriteLine("Disconnected From Server!");
        }
    }

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    /// <returns></returns>
    private async Task NetworkLoop()
    {
        Console.WriteLine("NetworkLoop()");

        while (connection.IsConnected)
        {
            try
            {
                // Start receiving data from the server
                await networkController.ReceiveFromServerAsync();
            }
            catch (Exception)
            {
                break;
            }
        }
    }

}

<!-- User Input -->
@code
{

    /// <summary>
    ///     TODO: XML COMMENT.
    /// </summary>
    /// <param name="key"></param>
    [JSInvokable]
    public void HandleKeyPress(string key)
    {
        // Only works if IsConnected
        if (!connection.IsConnected)
        {
            return;
        }

        networkController.KeyPressCommand(key);
    }

}

<!-- Rendering Game State -->
@code
{

    /// <summary>
    ///     C# reference to the html element for the drawing canvas.
    /// </summary>
    private BECanvasComponent canvasReference = null!;

    /// <summary>
    ///     Object attached to the canvas that has all the drawing methods.
    /// </summary>
    private Canvas2DContext context = null!;

    /// <summary>
    ///     C# reference to the html element for the background image.
    /// </summary>
    private ElementReference backgroundImage;

    private ElementReference wallImage;

    /// <summary>
    ///     Reference to Javascript .
    /// </summary>
    private IJSObjectReference jsModule = null!;

    /// <summary>
    ///     Width of the display canvas.
    /// </summary>
    private const int ViewWidth = 1000;

    /// <summary>
    ///     Height of the display canvas.
    /// </summary>
    private const int ViewHeight = 1000;

    private World copyWorld;

    /// <summary>
    ///     Called automatically after the page is rendered.
    ///     We use this to know when the first page load-
    ///     has occurred so we can initialize various data and start the server and drawing loops.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/SnakeGUI.razor.js");
            this.context = await this.canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        }

        else
        {
            // Start the game loop
            // Dont want to await because OnAfterRenderAsync would never return
            GameLoopAsync();
        }
    }

    /// <summary>
    ///     Renders the view once every 20 milliseconds (50 frames/second)
    /// </summary>
    /// <returns></returns>
    private async Task GameLoopAsync()
    {
        while (true)
        {
            // Draw the frame
            await DrawFrameAsync();

            // Control the frame rate, sleep for every iteration of loop
            Thread.Sleep(20);
        }
    }

    /// <summary>
    ///     Draws one frame of the game.
    /// </summary>
    /// <returns></returns>
    private async Task DrawFrameAsync()
    {
        // Batch the drawing calls for better performance
        await context.BeginBatchAsync();

        // Draw background image
        await context.DrawImageAsync(backgroundImage, 0, 0, ViewWidth, ViewHeight);

        // Draw Walls

        // Draw Powerups

        // Draw Snakes

        // Finish batch drawing
        await context.EndBatchAsync();

        // Must do this whenever something changes the way it needs to be displayed
        StateHasChanged();
    }

}