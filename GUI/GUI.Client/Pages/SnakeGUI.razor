@page "/snake"
@rendermode InteractiveServer
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics
@using System.Diagnostics
@using System.Text.Json
@using GUI.Client.Controllers
@using GUI.Client.Models
@inject IJSRuntime JsRuntime;

<PageTitle>Snake</PageTitle>

<!-- Connection Inputs -->
<div id="ConnectionInputs">
    <div class="input-row">

        <label for="playerName">Player Name: </label>
        <input id="playerName" type="text" @bind="playerName" disabled="@connection.IsConnected" />

        <label for="ServerNameOrAddress">Server Address: </label>
        <input id="ServerNameOrAddress" type="text" @bind="ServerNameOrAddress" disabled="@connection.IsConnected" />

        <label for="ServerPort">Port: </label>
        <input id="ServerPort" type="number" @bind="ServerPort" disabled="@connection.IsConnected" />

        @if (connection.IsConnected)
        {
            <button class="btn btn-primary" @onclick="DisconnectFromServer">Disconnect</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ConnectToServer">Connect</button>
        }

    </div>
</div>

<!-- Background Image -->
<div>
    <img @ref="backgroundImage" id="bgImage" src="images/Background.png" alt="image" style="display:none;" />
</div>

<!-- Canvas for Game Display -->
<div id="snakeCanvas" style="position: fixed; width: 100%; height: 100%">
    <BECanvas Width="1000" Height="1000" @ref="canvasReference"></BECanvas>
</div>

<!-- Connection -->
@code
{

    private string ServerNameOrAddress = "localhost";
    private int ServerPort = 11000;
    private NetworkConnection connection = new NetworkConnection();
    private string playerName;
    private NetworkController networkController;

    private async Task ConnectToServer()
    {
        Console.WriteLine("ConnectToServer()");

        if (!connection.IsConnected)
        {
            try
            {
                // Establish connection to server
                connection.Connect(ServerNameOrAddress, ServerPort);

                // Send PlayerName to server
                connection.Send(playerName);

                // Create a NetworkController using the NetworkConnection instance
                networkController = new NetworkController(connection, playerName);

                // Start the network loop to continuously receive data
                await NetworkLoop();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in ConnectToServer: " + ex.Message);
                throw;
            }
        }
    }

    private void DisconnectFromServer()
    {
        Console.WriteLine("DisconnectFromServer()");

        if (connection.IsConnected)
        {
            connection.Disconnect();
        }
    }

    private async Task NetworkLoop()
    {
        Console.WriteLine("NetworkLoop()");

        while (connection.IsConnected)
        {
            try
            {
                // Start receiving data from the server
                await networkController.ReceiveFromServerAsync();
            }
            catch (Exception ex)
            {
                DisconnectFromServer();
                Console.WriteLine("Error in NetworkLoop: " + ex.Message);
                break;
            }
        }
    }

}

<!-- Rendering Game State -->
@code
{

    private BECanvasComponent canvasReference = null!;
    private Canvas2DContext context = null!;
    private ElementReference backgroundImage;
    private IJSObjectReference jsModule = null!;
    private const int viewSize = 1000;

    public World snapshot;
    private Point2D head;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("OnAfterRenderAsync(FIRSTRENDER)");

            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/SnakeGUI.razor.js");
            this.context = await this.canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        }

        else if (connection.IsConnected)
        {
            Console.WriteLine("OnAfterRenderAsync(AFTERFIRSTRENDER)");

            // Start the game loop
            // Dont want to await because OnAfterRenderAsync would never return
            GameLoopAsync();
        }
    }

    private async void GameLoopAsync()
    {
        Console.WriteLine("GameLoopAsync()");

        while (networkController.theWorld == null)
        {
            Console.WriteLine("Waiting for the world to be initialized...");
            await Task.Delay(20);
        }

        while (true)
        {
            lock (networkController.theWorld)
            {
                snapshot = new(networkController.theWorld);
            }

            await DrawFrameAsync(snapshot);

            await Task.Delay(20);
        }
    }

    private async Task DrawFrameAsync(World snapshot)
    {
        Console.WriteLine("DrawFrameAsync()");

        // batch the drawing calls for better performance
        await context.BeginBatchAsync();

        // clip the view so that objects drawn outside the canvas will not be shown
        await context.BeginPathAsync();
        await context.RectAsync(0, 0, viewSize, viewSize);
        await context.ClipAsync();

        // Because we are modifying the transformation matrix, we need to save it so we can restore it at the end
        await context.SaveAsync();

        Console.WriteLine("Attempting to build Snake");

        // Check to see if snake is in the world
        if (!snapshot.Snakes.TryGetValue(networkController.playerID, out Snake? snake))
        {
            Console.WriteLine("Snake not yet created");
            return;
        }

        // Check to see if snake is initialized
        if (snake.SnakeBody.Count < 2)
        {
            Console.WriteLine("Snake still in creation");
            return;
        }

        // Get the loaction of the snakes head
        head = snake.SnakeBody[1];

        // Get the last point in SnakeBody to represent the head
        Console.WriteLine($"Head X: {head.X}");
        Console.WriteLine($"Head Y: {head.Y}");

        // Center on origin, move to center of view port
        await context.TranslateAsync(viewSize / 2, viewSize / 2);
        await context.TranslateAsync(-head.X, -head.Y);

        // Draw the background:
        await context.DrawImageAsync(backgroundImage, -snapshot.WorldSize / 2, -snapshot.WorldSize / 2, snapshot.WorldSize, snapshot.WorldSize);

        // Draw snake
        await DrawSnakeAsync(snapshot);

        // Draw walls
        await DrawWallsAsync(snapshot);

        // Draw powerups
        await DrawPowerupsAsync(snapshot);

        await context.RestoreAsync();

        // Finish batch drawing
        await context.EndBatchAsync();

        // Must do this whenever something changes the way it needs to be displayed
        StateHasChanged();
    }

    private async Task DrawSnakeAsync(World snapshot)
    {
        Console.WriteLine("DrawSnakeAsync()");

        // Clear the previous frame (optional, depending on your setup)
        await context.ClearRectAsync(0, 0, snapshot.WorldSize, snapshot.WorldSize);

        // Set the stroke color to black for drawing the line
        await context.SetStrokeStyleAsync("rgb(0, 0, 0)");
        await context.SetLineWidthAsync(10);  // Set the stroke width to 10 pixels

        // Loop through each snake in the snapshot
        foreach (Snake snake in snapshot.Snakes.Values)
        {
            Console.WriteLine($"Drawing Snake {snake.SnakeID}");

            // Loop through each segment in the snake's body
            for (int i = 1; i < snake.SnakeBody.Count; i++)  // Start from 1 to avoid a line from the origin point
            {
                var currentSegment = snake.SnakeBody[i];
                var previousSegment = snake.SnakeBody[i - 1];

                // Begin a new path for drawing a line
                await context.BeginPathAsync();

                // Move to the position of the previous segment
                await context.MoveToAsync(previousSegment.X, previousSegment.Y);

                // Draw a line to the position of the current segment
                await context.LineToAsync(currentSegment.X, currentSegment.Y);

                // Apply the stroke to render the line
                await context.StrokeAsync();
            }

            // Draw a red circle on the head (last segment of the snake)
            var head = snake.SnakeBody[snake.SnakeBody.Count - 1]; // The head is the last segment

            await context.SetFillStyleAsync("rgb(255, 0, 0)"); // Set color to red
            await context.BeginPathAsync();
            await context.ArcAsync(head.X, head.Y, 10, 0, 2 * Math.PI); // Draw a circle with a radius of 10
            await context.FillAsync(); // Fill the circle with the current fill style
        }

    }

    private async Task DrawWallsAsync(World snapshot)
    {
        foreach (Wall wall in snapshot.Walls.Values)
        {
            // Get the coordinates of the wall (top-left and bottom-right corners)
            int startX = wall.P1.X;
            int startY = wall.P1.Y;
            int width = Math.Abs(wall.P2.X - wall.P1.X);  // Width is the difference in X
            int height = Math.Abs(wall.P2.Y - wall.P1.Y); // Height is the difference in Y

            // Draw a filled rectangle for each wall
            await context.FillRectAsync(startX, startY, width, height);
        }
    }

    private async Task DrawPowerupsAsync(World snapshot)
    {
        foreach (Powerup powerup in snapshot.Powerups.Values)
        {
            await context.SetLineWidthAsync(5);
            await context.SetStrokeStyleAsync($"rgb( 255, 255, 0 )");
            await context.BeginPathAsync();
            await context.ArcAsync(powerup.PowerupLocation.X, powerup.PowerupLocation.Y, 3, 0, 2 * Math.PI);
            await context.StrokeAsync();
        }
    }

}

<!-- User Input -->
@code
{

    [JSInvokable]
    public void HandleKeyPress(string key)
    {
        // Only works if IsConnected
        if (!connection.IsConnected)
        {
            return;
        }

        networkController.KeyPressCommand(key);
    }

}