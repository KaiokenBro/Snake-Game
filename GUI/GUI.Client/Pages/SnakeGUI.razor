@page "/snake"
@rendermode InteractiveServer
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics
@using System.Diagnostics
@using System.Text.Json
@using GUI.Client.Controllers
@using GUI.Client.Models
@inject IJSRuntime JsRuntime;

<PageTitle>Snake</PageTitle>

<!-- Connection Inputs -->
<div id="ConnectionInputs">
    <div class="input-row">

        <label for="playerName">Player Name: </label>
        <input id="playerName" maxlength="16" type="text" @bind="playerName" disabled="@connection.IsConnected" />

        <label for="ServerNameOrAddress">Server Address: </label>
        <input id="ServerNameOrAddress" type="text" @bind="ServerNameOrAddress" disabled="@connection.IsConnected" />

        <label for="ServerPort">Port: </label>
        <input id="ServerPort" type="number" @bind="ServerPort" disabled="@connection.IsConnected" />

        @if (connection.IsConnected)
        {
            <button class="btn btn-primary" @onclick="DisconnectFromServer">Disconnect</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ConnectToServer">Connect</button>
        }

    </div>
</div>

<br />

<!-- Image for Powerup -->
<img id="powerupImage" src="images/powerup.png" style="display:none;" @ref="powerupImage" />

<!-- Image for Wall -->
<img id="wallImage" src="images/WallSprite.png" style="display:none;" @ref="wallImage" />

<!-- Background Image -->
<img @ref="backgroundImage" id="bgImage" src="images/Background.png" alt="image" style="display:none;" />

<!-- Canvas for Game Display -->
<div id="snakeCanvas" style="position: fixed; width: 100%; height: 100%">
    <BECanvas Width="1000" Height="1000" @ref="canvasReference"></BECanvas>
</div>

<!-- Connection / Network -->
@code
{

    private string ServerNameOrAddress = "localhost";
    private int ServerPort = 11000;
    private string playerName;
    private NetworkConnection connection = new NetworkConnection();
    private NetworkController networkController;

    private async Task ConnectToServer()
    {
        if (!connection.IsConnected)
        {
            try
            {
                connection.Connect(ServerNameOrAddress, ServerPort);
                connection.Send(playerName);
                networkController = new NetworkController(connection, playerName);

                await NetworkLoop();
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    private void DisconnectFromServer()
    {
        if (connection.IsConnected)
        {
            connection.Disconnect();
        }
    }

    private async Task NetworkLoop()
    {
        while (connection.IsConnected)
        {
            try
            {
                await networkController.ReceiveFromServerAsync();
            }
            catch (Exception)
            {
                break;
            }
        }
    }

    [JSInvokable]
    public void HandleKeyPress(string key)
    {
        if (!connection.IsConnected)
        {
            return;
        }

        networkController.KeyPressCommand(key);
    }

}

<!-- Rendering Game State -->
@code
{

    private BECanvasComponent canvasReference = null!;
    private Canvas2DContext context = null!;
    private ElementReference backgroundImage;
    private ElementReference powerupImage;
    private ElementReference wallImage;
    private IJSObjectReference jsModule = null!;
    private const int viewSize = 1000;
    private World snapshot;
    private Point2D viewHead;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/SnakeGUI.razor.js");
            this.context = await this.canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        }

        else if (connection.IsConnected)
        {
            GameLoopAsync();
        }
    }

    private async void GameLoopAsync()
    {
        while (networkController.theWorld == null)
        {
            await Task.Delay(20);
        }

        while (true)
        {
            networkController.ResetCommandFlag();

            lock (networkController.theWorld)
            {
                snapshot = new(networkController.theWorld);
            }

            await DrawFrameAsync(snapshot);
            await Task.Delay(20);
        }
    }

    private async Task DrawFrameAsync(World snapshot)
    {
        await context.BeginBatchAsync();
        await context.ClearRectAsync(0, 0, snapshot.WorldSize, snapshot.WorldSize);
        await context.SetFillStyleAsync("lightblue");
        await context.FillRectAsync(0, 0, 1000, 1000);
        await context.BeginPathAsync();
        await context.RectAsync(0, 0, viewSize, viewSize);
        await context.ClipAsync();
        await context.SaveAsync();

        if (!snapshot.Snakes.TryGetValue(networkController.playerID, out Snake? snake) || snake.SnakeBody.Count < 2)
        {
            return;
        }

        viewHead = snake.SnakeBody[snake.SnakeBody.Count - 1];

        await context.TranslateAsync(viewSize / 2, viewSize / 2);
        await context.TranslateAsync(-viewHead.X, -viewHead.Y);

        await context.DrawImageAsync(backgroundImage, -snapshot.WorldSize / 2, -snapshot.WorldSize / 2, snapshot.WorldSize, snapshot.WorldSize);
        await DrawSnakeAsync(snapshot);
        await DrawWallsAsync(snapshot);
        await DrawPowerupsAsync(snapshot);

        await context.RestoreAsync();
        await context.EndBatchAsync();
    }

    private async Task DrawSnakeAsync(World snapshot)
    {
        string[] uniqueColors = new string[]
        {
        "rgb(139, 69, 19)",     // Brown
        "rgb(0, 255, 0)",       // Green
        "rgb(0, 0, 255)",       // Blue
        "rgb(255, 255, 0)",     // Yellow
        "rgb(0, 255, 255)",     // Cyan
        "rgb(255, 0, 255)",     // Magenta
        "rgb(255, 165, 0)",     // Orange
        "rgb(128, 0, 128)"      // Purple
        };

        foreach (Snake snake in snapshot.Snakes.Values)
        {
            string strokeColor = snake.SnakeDied ? "rgb(255, 0, 0)" : uniqueColors[snake.SnakeID % uniqueColors.Length];

            await context.SetStrokeStyleAsync(strokeColor);
            await context.SetLineWidthAsync(10);

            for (int i = 1; i < snake.SnakeBody.Count; i++)
            {
                var currentSegment = snake.SnakeBody[i];
                var previousSegment = snake.SnakeBody[i - 1];

                await context.BeginPathAsync();
                await context.MoveToAsync(previousSegment.X, previousSegment.Y);
                await context.LineToAsync(currentSegment.X, currentSegment.Y);
                await context.StrokeAsync();
            }

            var head = snake.SnakeBody[snake.SnakeBody.Count - 1];

            await context.SetFillStyleAsync(snake.SnakeDied ? "rgb(255, 0, 0)" : strokeColor);
            await context.BeginPathAsync();
            await context.ArcAsync(head.X, head.Y, 10, 0, 2 * Math.PI);
            await context.FillAsync();

            string displayText = $"{snake.PlayerName} ({snake.PlayerScore})";

            await DrawTextAsync(displayText, head.X, head.Y - 15);
        }

    }

    // Helper method to draw text on the canvas
    private async Task DrawTextAsync(string text, int x, int y)
    {
        await context.SetFontAsync("20px Arial");
        await context.SetFillStyleAsync("black");
        await context.SetTextAlignAsync(TextAlign.Center);
        await context.FillTextAsync(text, x, y);
    }

    private async Task DrawWallsAsync(World snapshot)
    {
        foreach (Wall wall in snapshot.Walls.Values)
        {
            int deltaX = wall.P2.X - wall.P1.X;
            int deltaY = wall.P2.Y - wall.P1.Y;
            int wallLength = (int)Math.Sqrt(deltaX * deltaX + deltaY * deltaY);
            int numSegments = wallLength / 50;

            for (int i = 0; i < numSegments; i++)
            {
                int segmentX = wall.P1.X + (deltaX * i) / numSegments - 25;
                int segmentY = wall.P1.Y + (deltaY * i) / numSegments - 25;

                await context.DrawImageAsync(wallImage, segmentX, segmentY, 50, 50);
            }
        }
    }

    private async Task DrawPowerupsAsync(World snapshot)
    {
        foreach (Powerup powerup in snapshot.Powerups.Values)
        {
            await context.DrawImageAsync(powerupImage, powerup.PowerupLocation.X - 11, powerup.PowerupLocation.Y - 11, 22, 22);
        }
    }

}